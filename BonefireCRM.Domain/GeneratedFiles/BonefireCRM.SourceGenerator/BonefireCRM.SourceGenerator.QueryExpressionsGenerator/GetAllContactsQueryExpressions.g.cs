// <auto-generated/>
#nullable enable

using System.Linq.Expressions;
using BonefireCRM.Domain.Entities;
using BonefireCRM.Domain.DTOs.Contact;

namespace BonefireCRM.SourceGenerator;

public static partial class ContactQueryExpressions
{
    public static Expression<Func<Contact, bool>> Filter(GetAllContacts filterCriteria)
    {
        return x =>
            (filterCriteria.Id.HasValue || x.Id == filterCriteria.Id)
            && (string.IsNullOrEmpty(filterCriteria.FirstName) || x.FirstName == filterCriteria.FirstName)
            && (string.IsNullOrEmpty(filterCriteria.LastName) || x.LastName == filterCriteria.LastName)
            && (string.IsNullOrEmpty(filterCriteria.Email) || x.Email == filterCriteria.Email)
            && (string.IsNullOrEmpty(filterCriteria.PhoneNumber) || x.PhoneNumber == filterCriteria.PhoneNumber)
            && (string.IsNullOrEmpty(filterCriteria.JobRole) || x.JobRole == filterCriteria.JobRole)
            && (filterCriteria.UserId.HasValue || x.UserId == filterCriteria.UserId)
            && (filterCriteria.LifecycleStageId.HasValue || x.LifecycleStageId == filterCriteria.LifecycleStageId)
            && (filterCriteria.CompanyId.HasValue || x.CompanyId == filterCriteria.CompanyId)
            ;
    }

    public static LambdaExpression Sort(string sortCriteria)
    {
        return sortCriteria switch
        {
            nameof(Contact.Id) => (Expression<Func<Contact, global::System.Guid?>>)(x => x.Id),
            nameof(Contact.FirstName) => (Expression<Func<Contact, string>>)(x => x.FirstName),
            nameof(Contact.LastName) => (Expression<Func<Contact, string>>)(x => x.LastName),
            nameof(Contact.Email) => (Expression<Func<Contact, string>>)(x => x.Email),
            nameof(Contact.PhoneNumber) => (Expression<Func<Contact, string>>)(x => x.PhoneNumber),
            nameof(Contact.JobRole) => (Expression<Func<Contact, string>>)(x => x.JobRole),
            nameof(Contact.UserId) => (Expression<Func<Contact, global::System.Guid?>>)(x => x.UserId),
            nameof(Contact.LifecycleStageId) => (Expression<Func<Contact, global::System.Guid?>>)(x => x.LifecycleStageId),
            nameof(Contact.CompanyId) => (Expression<Func<Contact, global::System.Guid?>>)(x => x.CompanyId),
        };
    }
}